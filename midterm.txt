1.
(b)T(n) = kT(n/k)+O(n)
result:O(nlogn)
instance: k-way mergesort
(c)T(n) = 2T(n/2)+O(logn)
result:O(n)
instance: heapify
(d)T(n)= T(n-1)+O(logn)
result:O(nlogn)
instance: n pops from heap
2.
reason1: the path from root to leaf is non-deterministic 
reason2: O(logn) swap time is needed after position is found
3.
(a)    4              4             1             1
      / \            / \           / \           / \   
     2   3    =>    1   3    =>   4   3   =>    2   3 
    /              /             /             /
   1              2             2             4
(b)    2              5             3             3
      / \            / \           / \           / \
     3   6          3   6         5   6         4   6
    / \            /             /             /
   4   5          4             4             5
4.
(a) 
from heapq import heappush, heappop 
def nbest(ABs, k, n):     
	def trypush(i, p, q):         
		A, B = ABs[i]         
		if p<n and q<n and (i,p,q) not in used:             
			heappush(h, (A[p]+B[q], i, p, q, (A[p], B[q])))             
			used.add((i, p, q))     
	h, used = [], set()     
	for i in xrange(k):         
		trypush(i, 0, 0)     
	for _ in xrange(n):         
		_, i, p, q, pair = heappop(h)         
		yield pair         
		trypush(i, p+1, q)         
		trypush(i, p, q+1)
(b)O(klongk+nlog(n+k))
(c)O(k+nlog(n+k))
(d)O(k+nlogn)

5.
(d)both implementations are instances of dynamic programming.

6.
(a)
3 types of coins: V=[1, 3, 4]
greedy: 6 = 4+1+1
optimal: 6 = 3+3
(b)
dp(x): smallest number of coins needed to make up x cents
(c)
dp(0) = 0
	     x
dp(x) = min{
	     dp(x-n)+1 if x-V_i>=0 for i = 1,2,...,n-1
(d)
space: O(x)	time:O(xn)
(e)
dp(x, m): smallest number of types needed to make up x cents using a subset of
(f)
dp(0,m) = 0
		 dp(x,i)if i>0 or x=0
dp(x,i+1) = min{
		 dp(x-jV_i), i)+1 for j=0,1,....,n-1 and x-jV>=0
(g)
space:O(xn)
timeO(xn)
