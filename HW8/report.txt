(a) Describe a greedy algorithm for LIS and show a counter example.
When we use greedy algorithm for LIS, we should know what is greedy algorithm. For this case, greedy algorithm is choose the biggest number or letter first, then we go back to found the biggest one which is in front of this one and then continue. After we go though all the list and compare with others such  as  choose the second biggest number.
When we use this algorithm, we may have a problem for some case. Such as, we have some big number in the front and some increase number in the back. We may get less big number and ignore more number in the end. For example, we have a list (9, 7, 1, 0, 2, 3, 5, 4, 5, 6, 8, 7, 8). We may choose 9 at first, then we will found that we just get one number instead of the longer list in the end.

(b) Describe an exhaustive algorithm for TSP and analyze complexity.
For this case, I consider to use greedy algorithm to solve this problem. First, I will use 0, 1, 2, ..., n to mark the city which I will travel to. And I will start from the city which is marked by 1. I need an array S[n] to store which city I already traveled. Then I will found another city which is closet to city 0. And I also need a array to store the path I have traveled. So, I should make sure that when I want to go to city i, the path[i-1] should be the shortest path before I travel to city i.