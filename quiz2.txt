1.
beacause making insertion sort without heaps is not a binary research tree, so the time cannot be O(nlongn)
2.
(a)a.append(1)should be O(1)
(c)a += 1 should be O(1)
(d)del a[0] sould be O(n)
(e)del a[-1] should be O(1)
3.
def qsort(a):
	if a == []: return []
	pivot = a[random.randint(0, len(a)-1]
	left = [x for x in a if x < pivot]
	mid = [x for x in a if x == pivot]
	right = [x for x in a if x > pivot]
	return qsort(left) + mid + qsort(right)
4.
step1: sort the array
step2: find x = -y in array because if x = -y so x and y can be a pair..
time xomplexity should be O(nlogn)
it can not work for x+2y=0.But we can copy a array and make it as twice as the orignal one. that we can do the smiliar job that find is there any pair that x_i in orignal array and y_i in new array that x_i = - y_i
5.
def find(t,x,best=None)
	if t == []
		return best
	left,root,right = t
	if best is None or abs(root - x) < abs(best - x)
		best = root
	if x < root
		return find(left,x,best)
	return find(right,x,best)
time complexity
best-case: O(longn)
worst-case: O(nlogn)